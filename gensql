#!/bin/bash
set -e
trap 'echo Error at about $LINENO' ERR

VERSION="0.5"
PREFIX="$HOME/projects/gensql/db"
LIST=("city" "company" "email" "name" "university" "word")

# color codes
N="\033[0m"    # Reset
B="\033[1m"    # Bold
R="\033[1;31m" # Red
G="\033[1;32m" # Green
Y="\033[1;33m" # Yellow
M="\033[1;35m" # Magenta
C="\033[1;36m" # Cyan

##################################
#####      Help message      #####
##################################

help_text() {

    case $1 in
    "insert")
        printf "Usage: gensql insert [options]\n"
        printf "\n"
        printf "Options:\n"
        printf "  -h                    Shows this help message and exits\n"
        printf "  -n [number]           number of values need to be generated\n"
        printf "  -p [path]             custom directory for searching random values\n"
        printf "  -t [table name]       table name to be created\n"
        printf "  -v [string]           format string( variables are rand - random, str - string, num - number\n"
        printf "\n"
        printf "Formats for -v option:\n"
        printf "  ∙ %%num<range>\n"
        printf "  ∙ %%rand%%num<range>\n"
        printf "  ∙ %%rand<type>\n"
        printf "  ∙ %%str<string>{<range>}{<format>}<string>\n"
        printf "  ∙ %%rand%%str<string>{<range>}{<format>}<string>\n"
        printf "  ∙ <type>\n"
        # printf "1) Chooses random value of given type, from db/<type> file\n"
        # printf "  %%rand<type>            eg. %%randname, %%randcity, %%randemail\n"
        # printf "\n"
        # printf "2) Generates the string with random number in a given range\n"
        # printf "  %%rand%%str<string>{<range>}{<format>}<string>       -  <format> is similar as printf statements\n"
        # printf "     eg. %%rand%%strCS20A10{1-10}{02d} - this generates CS20A1004, CS20A1008, etc\n"
        # printf "        %%rand%%strCS20A10{1-30}{03d}AB - this generates CS20A10005AB,CS20A10002AB, etc\n"
        # printf "\n"
        # printf "3)Generates random number in a given range\n"
        # printf "  %%rand%%num<range>       eg.  %%rand%%num1-10, %%rand%%num100-115\n"
        # printf "\n"
        # printf "4) Generates number from min value to max value given,if 1-3, then 1,2,3 will be generated\n"
        # printf "  %%num<range>       eg.  %%num1-10, %%num100-115\n"
        # printf "\n"
        # printf "5) Generates string from min value to max value given,if a{1-3}{02d}, then a01,a02,a03 will be generated\n"
        # printf "  %%str<string>{<range>}{<format>}<string>       -  <format> is similar as printf statements\n"
        # printf "    eg. %%strCS20A10{1-10}{02d} - this generates CS20A1001, CS20A1002,...etc\n"
        # printf "        %%strCS20A10{2-30}{03d}AB - this generates CS20A10002AB,CS20A10003AB, ...etc\n"
        # printf "\n"
        # printf "6) Generates the value from first line to last line of file given\n"
        # printf "For each insertion,takes value from the file line by line, you need to create file named <type>\n"
        # printf "  <type>            eg. student_list, due_list\n"
        printf "NOTE: If you want use custom types, then make sure you passed -p option with path to your files\n"
        printf "\n"
        printf "Example:\n"
        printf "%b$ ./gensql insert -t table1 -n 5 -v %%randname,%%rand%%num34-50,%%strCS20A1{10-24}{02d},%%randcity,null%b\n" "$B" "$N"
        echo "      INSERT INTO table1 VALUES('Walker Avery',47,'CS20A110','Munich',null)
      INSERT INTO table1 VALUES('Dakota Mcgrath',43,'CS20A111','Rosario',null)
      INSERT INTO table1 VALUES('Marley Wolf',35,'CS20A112','Jakarta',null)
      INSERT INTO table1 VALUES('Janae Lam',35,'CS20A113','Xiamen',null)
      INSERT INTO table1 VALUES('Macy Santana',44,'CS20A114','Ahmedabad',null)"
        printf "\nReport bugs at https://github.com/ms-jagadeeshan/gensql/issues\n"
        ;;
    *)
        printf "Usage: gensql subcommand [options]\n"
        printf "\n"
        printf "Subcommands:\n"
        printf "  insert                Generates insertion code for mysql\n"
        printf "  alter                 Comming soon\n"
        printf "  create                Comming soon\n"
        printf "  help                  display this help and exit\n"
        printf "  version               output version information and exit\n"
        printf "\nReport bugs at https://github.com/ms-jagadeeshan/gensql/issues\n"
        ;;
    esac
    exit 0
}

randsomString() {
    tr -dc A-Za-z </dev/urandom | head -c 17
}

insert() {

    #############################
    #####      Getopts      #####
    #############################

    # -v : string for formatting
    # -h : help
    # -n : number of entries to be created
    # -t : table name
    # -p : custom directory path

    while getopts t:v:p:n:h options; do
        case $options in
        t) table_name=$OPTARG ;;
        v) val_string=$OPTARG ;;
        p)
            PREFIX_ALT=$OPTARG
            PREFIX_ALT=$(realpath ${PREFIX_ALT})
            if [ ! -d "$PREFIX_ALT" ]; then
                echo "Error: $PREFIX_ALT path not exists"
                exit 1
            fi

            ;;
        n) no_of_vals=$OPTARG ;;
        h) help_text "insert" ;;
        *) help_text "insert" ;;
        esac
    done

    table_name=${table_name:-"Table1"}
    no_of_vals=${no_of_vals:-15}
    val_string=${val_string:-"%randname,%rand%num34-50,%strCS20A1{10-24}{02d},%randcity"}

    FUNCS=()

    IFS=','

    for column in $val_string; do
        case "${column}" in
        "%rand%str"*)

            ## Format %rand%str<string>{<range>}{<format>}<string>
            ## eg. rand%strCS20{1-10}{02d}00

            column=${column#%rand%str}
            local format_size=$(echo ${column} | cut -d "{" -f3 | cut -d "}" -f1)
            local numrange=$(echo ${column} | cut -d "{" -f2 | cut -d "}" -f1)
            local min=${numrange%\-*}
            local max=${numrange##*\-}
            max=$((max - min))
            unset numrange
            local str1=$(echo ${column} | cut -d "{" -f1 | cut -d "}" -f1)
            local str2=$(echo ${column} | cut -d "{" -f3 | cut -d "}" -f2)

            local randomString=$(randsomString)
            eval "function $randomString() {
                result=\$(($min + RANDOM % $max))
                printf \"'${str1}%${format_size}${str2}'\" \"\${result}\"
                }"

            FUNCS+=("$randomString")
            ;;
        "%rand%num"*)

            ## Format %rand%num<range>
            ## eg. rand%num1-10

            column=${column#%rand%num}
            local min=${column%\-*}
            local max=${column##*\-}
            max=$((max - min))

            # Random string for function name
            local randomString=$(randsomString)

            # function calculates random number and returns the value
            eval "function $randomString() {
                result=\$(($min + RANDOM % $max))
                echo -n \"\${result}\"
                }"

            FUNCS+=("$randomString")
            ;;
        "%num"*)

            # Format %num<range>
            # eg. %num10-20
            column=${column#%num}
            local num1=${column%\-*}
            local num2=${column##*\-}

            # Random string for function name
            local randomString=$(randsomString)

            # Random string for variable name
            local randomString1=$(randsomString)

            # Function which returns value and increments after eachtime being called
            eval "function $randomString() {

                $randomString1=\${$randomString1:-$num1}
                echo -n \$$randomString1
                (($randomString1++))
                }"

            FUNCS+=("$randomString")

            ;;
        "%str"*)

            # Format %str<string>{<range>}{<format>}<string>
            # eg. %strCS20{1-10}{02d}00

            column=${column#%str}
            local format_size=$(echo ${column} | cut -d "{" -f3 | cut -d "}" -f1)
            local numrange=$(echo ${column} | cut -d "{" -f2 | cut -d "}" -f1)

            # num1 => lower bound, num2 => upper bound
            local num1=${numrange%\-*}
            local num2=${numrange##*\-}
            unset numrange

            # Strings before and after the numbers
            local str1=$(echo ${column} | cut -d "{" -f1 | cut -d "}" -f1)
            local str2=$(echo ${column} | cut -d "{" -f3 | cut -d "}" -f2)

            # Random strings for name
            local randomString=$(randsomString)
            local randomString1=$(randsomString)

            eval "function $randomString() {

                $randomString1=\${$randomString1:-$num1}
                printf \"'${str1}%${format_size}${str2}'\" \$$randomString1
                (($randomString1++))
                }"
            FUNCS+=("$randomString")
            ;;
        "%rand"*)

            ## Formats like %rand<type>
            ## eg. %randname,%randcity
            column=${column#%rand}

            # checking if file exists
            local file="${PREFIX_ALT:-$PREFIX}/$column"
            if [ ! -f "$file" ]; then
                echo "Error: $file not exists"
            fi

            # generating random string for function name
            local randomString=$(randsomString)

            # evaluating function dynamically and storing the function name in FUNCS array
            eval "function $randomString() {
        local max=\`awk 'END { print NR }' "$file"\`
        local result=\$((1 + RANDOM % \$((max--))))
        sed \"\${result}q;d\" "$file" | tr -d '\\n'  | sed 's/^/\\x27/g' |  sed 's/\$/\\x27/g'
    }"
            FUNCS+=("$randomString")
            ;;

        *)
            # if no special format specified, just puts the same text in all columns
            # eg. null
            # generating random string for function name
            local randomString=$(randsomString)
            local randomString1=$(randsomString)

            # checking if file exists
            local file="${PREFIX_ALT:-$PREFIX}/$column"
            if [ ! -f "$file" ]; then
                eval "function $randomString() {
                echo -n "$column"
                    }"
            else

                # evaluating function dynamically and storing the function name in FUNCS array
                eval "function $randomString() {
        local max=\`awk 'END { print NR }' "$file"\`
        $randomString1=\${$randomString1:-1}
        sed \"\${$randomString1}q;d\" "$file" | tr -d '\\n'  | sed 's/^/\\x27/g' |  sed 's/\$/\\x27/g'
        (($randomString1++))
    }"
            fi
            FUNCS+=("$randomString")
            ;;
        esac

    done
    unset IFS

    for ((i = 0; i < no_of_vals; i++)); do
        printf "INSERT INTO $table_name VALUES("
        ${FUNCS[0]}
        for funcs in ${FUNCS[@]:1}; do
            printf ","
            $funcs
        done
        printf ")\n"
    done

}

case "$1" in
"insert")
    shift 1
    insert $@
    ;;
"alter")
    echo "Comming soon"
    ;;
"create")
    echo "Comming soon"
    ;;
"help" | "--help")
    help_text
    ;;
"version" | "--version")
    printf "gensql %s\n" "$VERSION"
    exit 0
    ;;
*)
    echo "Comming soon"
    ;;
esac
